"""
The Stone Game (Nim Variant)
----------------------------
This is a console-based game where the player competes against the computer.
There are three pools of stones, each starting with 3-15 stones.

Rules:
- On each turn, a player removes one or more stones from a single pool.
- The player who removes the last stone wins the game.
- The computer uses an optimal strategy based on XOR logic.
- Multiple rounds are supported, with a running score.

Author: Stephan Multani (Inspired by my grandfather's original game)
Date: Jun/2025

Comments generated by AI
"""

import random
import time
import os

# Clears the terminal screen (Windows and UNIX-compatible)
def clear_screen():
    os.system('cls' if os.name == 'nt' else 'clear')

# Displays the ASCII title and instructions
def print_title():
    print(r"""
             ______   __  __     ______                          
            /\__  _\ /\ \_\ \   /\  ___\                         
            \/_/\ \/ \ \  __ \  \ \  __\                         
               \ \_\  \ \_\ \_\  \ \_____\                       
                \/_/   \/_/\/_/   \/_____/                       
                                                     
 ______     ______   ______     __   __     ______   
/\  ___\   /\__  _\ /\  __ \   /\ "-.\ \   /\  ___\  
\ \___  \  \/_/\ \/ \ \ \/\ \  \ \ \-.  \  \ \  __\  
 \/\_____\    \ \_\  \ \_____\  \ \_\\"\_\  \ \_____\
  \/_____/     \/_/   \/_____/   \/_/ \/_/   \/_____/
                                                     
         ______     ______     __    __     ______           
        /\  ___\   /\  __ \   /\ "-./  \   /\  ___\          
        \ \ \__ \  \ \  __ \  \ \ \-./\ \  \ \  __\          
         \ \_____\  \ \_\ \_\  \ \_\ \ \_\  \ \_____\        
          \/_____/   \/_/\/_/   \/_/  \/_/   \/_____/ 

                🎮 THE STONE GAME 🎮
        Take turns removing stones from 3 pools.
            Take the LAST stone to WIN!
    """)
    print("\a")  # Beep sound to signal start
    time.sleep(1)

# Initializes three pools with random values between 3 and 15
def init_pools():
    return [random.randint(3, 15) for _ in range(3)]

# Displays current stone counts in all pools using ASCII
def display_pools(pools):
    print("\n📦 Current Pools:")
    for i, stones in enumerate(pools):
        stone_line = '● ' * stones
        print(f"  Pool {i + 1}: {stone_line}({stones} stones)")

# Returns True if all pools are empty
def is_game_over(pools):
    return sum(pools) == 0

# Handles the player's turn
def player_move(pools):
    while True:
        try:
            pool = int(input("Choose a pool (1-3): ")) - 1
            if pool not in [0, 1, 2] or pools[pool] == 0:
                print("❌ Invalid pool. Try again.")
                continue

            max_take = pools[pool]
            amount = int(input(f"How many stones to take from Pool {pool + 1} (1 to {max_take}): "))
            if 1 <= amount <= max_take:
                pools[pool] -= amount
                print(f"\n✅ You took {amount} stone(s) from Pool {pool + 1}.")
                return
            else:
                print("❌ Invalid number of stones. Try again.")
        except ValueError:
            print("❌ Invalid input. Use numbers.")

# Returns the XOR of all pool sizes — used in optimal strategy
def xor_total(pools):
    result = 0
    for count in pools:
        result ^= count
    return result

# Handles the computer's move using XOR strategy
def computer_move(pools):
    xor = xor_total(pools)

    # Try to find a move that makes XOR 0 (winning position)
    for i in range(len(pools)):
        for take in range(1, pools[i] + 1):
            test_pools = pools.copy()
            test_pools[i] -= take
            if xor_total(test_pools) == 0:
                pools[i] -= take
                print(f"Computer took {take} stone(s) from Pool {i + 1}.")
                return

    # If no optimal move found, pick a random valid move
    valid_pools = [i for i in range(3) if pools[i] > 0]
    pool = random.choice(valid_pools)
    amount = random.randint(1, pools[pool])
    pools[pool] -= amount
    print(f"Computer took {amount} stone(s) from Pool {pool + 1}.")

# Ask user who should start the round
def ask_who_starts():
    while True:
        choice = input("Do you want to start? (y/n): ").strip().lower()
        if choice == 'y':
            return True
        elif choice == 'n':
            return False
        else:
            print("❌ Please enter 'y' or 'n'.")

# Plays a single round of the game
def play_round():
    pools = init_pools()
    player_turn = ask_who_starts()

    while True:
        display_pools(pools)

        if player_turn:
            print("\n🎮 Your turn:")
            player_move(pools)
            if is_game_over(pools):
                print("\n🎉 You took the last stone. You win this round!")
                return "Player"
        else:
            print("\n🤖 Computer's turn:")
            time.sleep(1)
            computer_move(pools)
            if is_game_over(pools):
                print("\n💻 Computer took the last stone. Computer wins this round.")
                return "Computer"

        player_turn = not player_turn
        print("\n" + "-" * 50)

# Main game loop
def main():
    clear_screen()
    print_title()
    player_score = 0
    computer_score = 0
    round_num = 1

    while True:
        print(f"\n🔁 Starting Round {round_num}")
        winner = play_round()

        # Update scoreboard
        if winner == "Player":
            player_score += 1
        else:
            computer_score += 1

        print(f"\n🏆 Scoreboard: You {player_score} - {computer_score} Computer")

        # Ask to play again
        again = input("\nPlay another round? (y/n): ").strip().lower()
        if again != 'y':
            print("\n👋 Thanks for playing! Goodbye!")
            break

        round_num += 1
        clear_screen()
        print_title()

# Run the game
if __name__ == "__main__":
    main()
